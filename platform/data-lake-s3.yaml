AWSTemplateFormatVersion: "2010-09-09"
Description: "Cloudformation template to create datalake in S3 and Query through Athena"

Parameters:
  Environment:
    Type: String
    Default: DV
    AllowedValues:
      - DV
      - QA
      - PD

Mappings:
  EnvMap:
    PD:
      EnvLower: "pd"
      EnvUpper: "PD"
    QA:
      EnvLower: "qa"
      EnvUpper: "QA"
    DV:
      EnvLower: "dv"
      EnvUpper: "DV"

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${Environment}-Twitter-Lambda-Role"
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - apigateway.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/AWSKeyManagementServicePowerUser
      Policies:
        - PolicyName: AllowWriteToKinesis
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - kinesis:PutRecord
                  - kinesis:PutRecords
                  - kinesis:DescribeStream
                  - kinesis:GetRecords
                  - kinesis:GetShardIterator
                  - kinesis:ListStreams
                Resource: !Sub arn:aws:kinesis:${AWS::Region}:${AWS::AccountId}:stream/${Environment}-Twitter-Events-Stream
        - PolicyName: AllowKMSKeyAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: KeyAccess
                Effect: Allow
                Action:
                  - kms:List*
                Resource: !Sub arn:aws:kms:${AWS::Region}:${AWS::AccountId}:*
              - Sid: LambdaKeyAccess
                Effect: Allow
                Action:
                  - kms:List*
                  - kms:Create*
                  - kms:Decrypt
                  - kms:Encrypt
                  - kms:Describe*
                  - kms:Generate*
                  - kms:ReEncrypt*
                  - kms:UpdateAlias
                  - kms:UpdateKeyDescription
                Resource: !Sub arn:aws:kms:${AWS::Region}:${AWS::AccountId}:*

  PushEventsToKinesisLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "push-events-to-kinesis-lambda"
      Code:
        ZipFile: |
          const AWS = require("aws-sdk");
          var kinesis = new AWS.Kinesis();
          exports.handler = function (event, context, callback) {
            var records = [];
            event.forEach((element) => {
              const tweet = {
                full_text: element.full_text,
                user: element.user.screen_name,
                created_at: element.created_at,
              };
              var record = {
                Data: JSON.stringify(tweet),
                PartitionKey: String(Date.now()),
              };
              records.push(record);
            });
            console.log("records", records);
            var recordsParams = {
              Records: records,
              StreamName: process.env.STREAM_NAME,
            };
            kinesis.putRecords(recordsParams, function (err, data) {
              if (err) {
                callback(err);
                console.log("error:", err);
              } else {
                console.log("sucess", data);
                callback(null, data);
              }
            });
          };
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          STREAM_NAME: !Sub ${Environment}-Twitter-Events-Stream

      Runtime: nodejs10.x
      Timeout: 60

  KinesisKmsKey:
    Type: AWS::KMS::Key
    Properties:
      Description: Key for the Twitter Kinesis Stream
      EnableKeyRotation: true
      Enabled: true
      KeyPolicy:
        Version: "2012-10-17"
        Id: key-lambda
        Statement:
          - Sid: Allow administration of the key
            Effect: Allow
            Principal:
              AWS:
                Fn::Sub: arn:${AWS::Partition}:iam::${AWS::AccountId}:root
            Action:
              - kms:*
            Resource: "*"
          - Sid: Allow use of the key
            Effect: Allow
            Principal:
              AWS: !GetAtt LambdaExecutionRole.Arn
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource: "*"

  TwitterBucketKmsKey:
    Type: AWS::KMS::Key
    DependsOn: KinesisS3DeliveryStreamRole
    Properties:
      Description: Key for the Twitter S3 Bucket
      EnableKeyRotation: true
      Enabled: true
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Sid: Allow administration of the key
            Effect: Allow
            Principal:
              AWS:
                Fn::Sub: arn:${AWS::Partition}:iam::${AWS::AccountId}:root
            Action:
              - kms:*
            Resource: "*"
          - Sid: Allow use of the key.
            Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:role/${Environment}-Twitter-Kinesis-S3-Delivery-Stream-Role"
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource: "*"

  TwitterEventsStream:
    Type: AWS::Kinesis::Stream
    Properties:
      Name: !Sub ${Environment}-Twitter-Events-Stream
      ShardCount: 1
      StreamEncryption:
        EncryptionType: KMS
        KeyId: !Ref KinesisKmsKey

  TwitterEventsBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub
        - "${EnvLower}-twitter-events-${AWS::AccountId}"
        - EnvLower: !FindInMap [EnvMap, !Ref Environment, EnvLower]
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              KMSMasterKeyID: !Ref TwitterBucketKmsKey
              SSEAlgorithm: "aws:kms"

  TwitterEventsRawBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub
        - "${EnvLower}-twitter-events-${AWS::AccountId}-raw"
        - EnvLower: !FindInMap [EnvMap, !Ref Environment, EnvLower]
      LifecycleConfiguration:
        Rules:
          - Id: ExpiryRule
            Status: Enabled
            ExpirationInDays: "30"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              KMSMasterKeyID: !Ref TwitterBucketKmsKey
              SSEAlgorithm: "aws:kms"

  KinesisS3DeliveryStreamRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${Environment}-Twitter-Kinesis-S3-Delivery-Stream-Role"
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - firehose.amazonaws.com
        Version: 2012-10-17
      Policies:
        - PolicyName: !Sub "${Environment}-Twitter-Kinesis-S3-Delivery-Stream-Policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - glue:GetTable
                  - glue:GetTableVersions
                  - glue:GetTableVersion
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:AbortMultipartUpload
                  - s3:GetBucketLocation
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:ListBucketMultipartUploads
                  - s3:PutObject
                Resource:
                  - !Sub
                    - "arn:aws:s3:::${EnvLower}-twitter-events-${AWS::AccountId}"
                    - EnvLower: !FindInMap [EnvMap, !Ref Environment, EnvLower]
                  - !Sub
                    - "arn:aws:s3:::${EnvLower}-twitter-events-${AWS::AccountId}/*"
                    - EnvLower: !FindInMap [EnvMap, !Ref Environment, EnvLower]
                  - !Sub
                    - "arn:aws:s3:::${EnvLower}-twitter-events-${AWS::AccountId}-raw"
                    - EnvLower: !FindInMap [EnvMap, !Ref Environment, EnvLower]
                  - !Sub
                    - "arn:aws:s3:::${EnvLower}-twitter-events-${AWS::AccountId}-raw/*"
                    - EnvLower: !FindInMap [EnvMap, !Ref Environment, EnvLower]
              - Effect: Allow
                Action:
                  - kinesis:DescribeStream
                  - kinesis:GetShardIterator
                  - kinesis:GetRecords
                Resource:
                  - !Sub arn:aws:kinesis:${AWS::Region}:${AWS::AccountId}:stream/${Environment}-Twitter-Events-Stream
              - Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:GenerateDataKey
                Resource: "*"
              - Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:GenerateDataKey
                Resource:
                  - !GetAtt KinesisKmsKey.Arn

  TwitterEventsFirehose:
    Type: AWS::KinesisFirehose::DeliveryStream
    DependsOn: KinesisS3DeliveryStreamRole
    Properties:
      DeliveryStreamName: !Sub ${Environment}-Twitter-Events-Firehose-S3
      DeliveryStreamType: KinesisStreamAsSource
      KinesisStreamSourceConfiguration:
        KinesisStreamARN: !GetAtt TwitterEventsStream.Arn
        RoleARN: !GetAtt KinesisS3DeliveryStreamRole.Arn
      ExtendedS3DestinationConfiguration:
        BucketARN: !GetAtt TwitterEventsBucket.Arn
        Prefix: "year=!{timestamp:YYYY}/month=!{timestamp:MM}/day=!{timestamp:dd}/hour=!{timestamp:HH}/"
        ErrorOutputPrefix: "!{firehose:error-output-type}/year=!{timestamp:YYYY}/month=!{timestamp:MM}/day=!{timestamp:dd}/hour=!{timestamp:HH}/"
        BufferingHints:
          IntervalInSeconds: 60
          SizeInMBs: 64
        CompressionFormat: UNCOMPRESSED
        EncryptionConfiguration:
          KMSEncryptionConfig:
            AWSKMSKeyARN: !GetAtt TwitterBucketKmsKey.Arn
        S3BackupMode: Enabled
        S3BackupConfiguration:
          BucketARN: !GetAtt TwitterEventsRawBucket.Arn
          BufferingHints:
            IntervalInSeconds: 60
            SizeInMBs: 1
          CompressionFormat: UNCOMPRESSED
          EncryptionConfiguration:
            KMSEncryptionConfig:
              AWSKMSKeyARN: !GetAtt TwitterBucketKmsKey.Arn
          Prefix: "year=!{timestamp:YYYY}/month=!{timestamp:MM}/day=!{timestamp:dd}/hour=!{timestamp:HH}/"
          ErrorOutputPrefix: "!{firehose:error-output-type}/year=!{timestamp:YYYY}/month=!{timestamp:MM}/day=!{timestamp:dd}/hour=!{timestamp:HH}/"
          RoleARN: !GetAtt KinesisS3DeliveryStreamRole.Arn
        RoleARN: !GetAtt KinesisS3DeliveryStreamRole.Arn
        DataFormatConversionConfiguration:
          SchemaConfiguration:
            CatalogId: !Ref AWS::AccountId
            RoleARN: !GetAtt KinesisS3DeliveryStreamRole.Arn
            DatabaseName: !Ref TwitterEventsGlueDatabase
            TableName: !Ref TwitterEventsGlueTable
            Region: !Ref AWS::Region
            VersionId: LATEST
          InputFormatConfiguration:
            Deserializer:
              OpenXJsonSerDe: {}
          OutputFormatConfiguration:
            Serializer:
              ParquetSerDe: {}
          Enabled: True

  TwitterEventsGlueDatabase:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Description: Database for Twitter Tables
        Name: !Sub
          - ${EnvLower}-twitter-events-db
          - { EnvLower: !FindInMap [EnvMap, !Ref Environment, EnvLower] }

  TwitterEventsGlueTable:
    Type: AWS::Glue::Table
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseName: !Ref TwitterEventsGlueDatabase
      TableInput:
        Description: Table for Twitter
        TableType: EXTERNAL_TABLE
        Parameters: { "classification": "parquet", "compressionType": "none" }
        Name: !Sub
          - "${EnvLower}_twitter_events_${AWS::AccountId}"
          - EnvLower: !FindInMap [EnvMap, !Ref Environment, EnvLower]
        PartitionKeys:
          - Name: year
            Type: bigint
          - Name: month
            Type: bigint
          - Name: day
            Type: bigint
          - Name: hour
            Type: bigint
        StorageDescriptor:
          Columns:
            - Name: full_text
              Type: string
            - Name: user
              Type: string
            - Name: created_at
              Type: string
          Location: !Sub
            - s3://${EnvLower}-twitter-events-${AWS::AccountId}/
            - { EnvLower: !FindInMap [EnvMap, !Ref Environment, EnvLower] }
          InputFormat: org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat
          OutputFormat: org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat
          SerdeInfo:
            SerializationLibrary: org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe
            Parameters:
              serialization.format: "1"

  TwitterEventsS3CrawlerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub
        - ${EnvLower}-twitter-events-glue-s3-crawler-role
        - { EnvLower: !FindInMap [EnvMap, !Ref Environment, EnvLower] }
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "glue.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole
      Policies:
        - PolicyName: !Sub
            - ${EnvLower}-twitter-events-glue-s3-crawler-policy
            - { EnvLower: !FindInMap [EnvMap, !Ref Environment, EnvLower] }
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: !Sub
                  - "arn:aws:s3:::${EnvLower}-twitter-events-${AWS::AccountId}/*"
                  - {
                      EnvLower: !FindInMap [EnvMap, !Ref Environment, EnvLower],
                    }
              - Effect: Allow
                Action:
                  - kms:Decrypt
                Resource: !GetAtt TwitterBucketKmsKey.Arn

  TwitterEventsS3Crawler:
    Type: AWS::Glue::Crawler
    DependsOn: TwitterEventsGlueTable
    Properties:
      Name: !Sub
        - ${EnvLower}-twitter-events-s3-crawler
        - { EnvLower: !FindInMap [EnvMap, !Ref Environment, EnvLower] }
      Description: Scans S3 and load new partitions
      DatabaseName: !Ref TwitterEventsGlueDatabase
      Role: !GetAtt TwitterEventsS3CrawlerRole.Arn
      Schedule:
        ScheduleExpression: cron(15,45 * ? * * *)
      Targets:
        S3Targets:
          - Path: !Sub
              - "s3://${EnvLower}-twitter-events-${AWS::AccountId}/"
              - EnvLower: !FindInMap [EnvMap, !Ref Environment, EnvLower]
      SchemaChangePolicy:
        DeleteBehavior: DELETE_FROM_DATABASE
        UpdateBehavior: LOG
      Configuration: '{
        "Version":1.0,
        "CrawlerOutput":{
        "Partitions": {"AddOrUpdateBehavior":"InheritFromTable"},
        "Tables":{"AddOrUpdateBehavior":"MergeNewColumns"}}}'

Outputs:
  TwitterEventsStreamName:
    Description: "Name of twitter events stream"
    Value: !Ref "TwitterEventsStream"
    Export:
      Name: !Sub "TwitterEventsStreamName-${Environment}"
